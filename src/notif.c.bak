#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <sys/inotify.h>

#include "notif.h"

#define EVENT_SIZE (sizeof(struct inotify_event))
#define EVENT_BUF_LEN (1024 * (EVENT_SIZE + 16))

int add_watchdir(int * fd, const char * dirname, uint32_t events)
{
    DIR* dir = opendir(dirname);
    if (dir) {
        return inotify_add_watch(*fd, dirname, events);
    } else if (ENOENT == errno) {
        perror("ERROR::Watched directory does not exists");
        return -1;
    } else {
        perror("ERROR::opening directory");
        return -1;
    }
}

int main()
{
	int length, i, j = 0;
	int fd;
	int depth = 0;
	char buffer[EVENT_BUF_LEN];
    int watchdirs[5];
    int fds[5];

	/* Create inotify instance */
	fd = inotify_init();
	if(fd < 0)
		perror("ERROR::inotify init");
    watchdirs[0] = add_watchdir(&fd, "tests", IN_CREATE | IN_DELETE);

    depth++;

    printf("Watchdir number is: %d\n", watchdirs[0]);
    printf("Fd number is: %d\n", fds[0]);

    for (i = 0; i < 5; i++) {
        printf("entering loop: %d\n", i);

        printf("FD is: %d\n", fd);
        length = read(fd, buffer, EVENT_BUF_LEN);
        if (length < 0)
            perror("ERROR::Event directory read");

        printf("Length is: %d\n", length);
        /* read the change event one by one and process it accordingly.*/
        while (j < length) {
            struct inotify_event *event = (struct inotify_event *) &buffer[j];
            if (event->len) {
                if (event->mask & IN_CREATE) {
                    if (event->mask & IN_ISDIR) {
                        printf("New directory %s created.\n", event->name);
                        fds[i+1] = inotify_init();
                        watchdirs[i+1] = inotify_add_watch(fds[i+1], event->name, IN_CREATE | IN_DELETE);
                    } else {
                        printf("New file %s crated.\n", event->name);
                    }
                } else if (event->mask & IN_DELETE) {
                    if (event->mask & IN_ISDIR) {
                        printf("Directory %s deleted.\n", event->name);
                    } else {
                        printf("File %s deleted.\n", event->name);
                    }
                }
            }
            j += EVENT_SIZE + event->len;
        }


        inotify_rm_watch(fd, watchdirs[i]);
        close(fd);
    }
}

